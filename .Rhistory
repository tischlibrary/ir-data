# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(1, 2))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(1, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(5, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
colors()
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "gray14", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(300, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.55), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.1), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta)
y = sin(theta)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.78), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.78), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.2), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(2, 0.45, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, 0.45, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, 0.12, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, 0.8, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, 5, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
# generate pairs of x-y values
theta = seq(0, pi, length = 300)
x = cos(theta*2)
y = sin(theta*2)
# set graphical parameters
op = par(bg = "red", mar = rep(0, .9))
# plot
plot(x, y, type = 'n')
segments(rep(0, 299), rep(0, 299), x[1:299] * runif(299, 0.7),
y[1:299] * runif(299, 0.7),
col = hsv(runif(1, .5, 0.50), 1, 1, runif(299, 0.5)),
lwd = 5*runif(600))
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
# generate pairs of x-y values
x1 = c(seq(0, pi, length = 50), seq(pi, 2*pi, length = 50))
y1 = cos(x1) / sin(x1)
x2 = seq(1.02 * 2 * pi + pi/2, 4*pi + pi/2, length = 50)
y2 = tan(x2)
# set graphical parameters
op = par(bg="black", mar=rep(.5,4))
# plot
plot(c(x1, x2), c(y1, y2), type = "n", ylim = c(-11, 11))
for (i in seq(-10, 10, length = 100))
{
lines(x1, y1 + i, col = hsv(runif(1,.65,.7), 1, 1, runif(1,.7)),
lwd = 4 * runif(1, 0.3))
lines(x2, y2 + i, col = hsv(runif(1,.65,.7), 1, 1, runif(1,.7)),
lwd = 4 * runif(1, 0.3))
}
help("read.csv")
# mandelbrot_naive.R
# "Naive" implementation of Mandelbrot Set in R
# Myles Harrison
# http://www.everydayanalytics.ca
# parameters
cols=colorRampPalette(c("blue","yellow","red","black"))(11)
xmin = -2
xmax = 2
nx = 150
ymin = -1.5
ymax = 1.5
ny = 150
n=200
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
for (i in 1:nx) {
for (j in 1:ny) {
if(Mod(z[i,j]) < 2 && k[i,j] < n) {
z[i,j] <- z[i,j]^2 + c[i,j]
k[i,j] <- k[i,j] + 1
}
}
}
}
image(x,y,k, col=cols)
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = LifeExpectancy)) + geom_point()
library(ggplot2)
library(ggplot2)
library("ggplot2", lib.loc="~/R/R-3.2.3/library")
library(slidify)
install.packages("slidify")
install_github(c("hilaryparker/explainr", "hilaryparker/catsplainr"))
install.packaages("install_github")
install.packages("install_github")
install_github(c("hilaryparker/explainr", "hilaryparker/catsplainr"))
library(install_github)
library(tufte)
help(tufte)
??tufter
??tufte
&nbsp;
library(slidify)
slidify("index.Rmd")
library(tufte)
library(tufte)
library(tufte)
install.packages("revealjs", type = "source")
library(revealjs)
---
title: "Habits"
author: John Doe
date: March 22, 2005
output: revealjs::revealjs_presentation
---
# In the morning
## Getting up
- Turn off alarm
- Get out of bed
## Breakfast
- Eat eggs
- Drink coffee
# In the evening
## Dinner
- Eat spaghetti
- Drink wine
## Going to sleep
- Get in bed
- Count sheep
library(revealjs)
install.packages("viridis")
setwd("~/R")
setwd("C:/Users/jquan01/Desktop")
setwd("C:/Users/jquan01/Desktop")
getwd()
library(revealjs)
library(dplyr)
library(tidyr)
library(ggplot2)
library(viridis)
library(ggthemes)
polls <- read.csv("http://projects.fivethirtyeight.com/general-model/president_general_polls_2016.csv")
polls_orig <- read.csv("../data/polls.csv", stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(viridis)
library(ggthemes)
# this next code will need to be adapted if you don't have a ../data/ folder...
# alternatively, if that link stops working, there's a static copy at http://ellisp.github.io/data/polls.csv
www <- "http://projects.fivethirtyeight.com/general-model/president_general_polls_2016.csv"
download.file(www, destfile = "../polls.csv")
# download data
polls_orig <- read.csv("../polls.csv", stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(viridis)
library(ggthemes)
www <- "http://projects.fivethirtyeight.com/general-model/president_general_polls_2016.csv"
download.file(www, destfile = "../polls.csv")
polls_orig <- read.csv("../polls.csv", stringsAsFactors = FALSE)
grades = c("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D", "")
# parse the dates as proper dates, and add structure to the grade
polls <- polls_orig %>%
mutate(
startdate = as.Date(startdate, "%m/%d/%Y"),
enddate  = as.Date(enddate, "%m/%d/%Y"),
grade = ordered(grade, levels = grades)
)
polls %>%
ggplot(aes(x = enddate, y = poll_wt, colour = type, size = samplesize)) +
geom_point() +
scale_y_sqrt() +
facet_wrap(~grade)
polls %>%
ggplot(aes(x = enddate, y = poll_wt, colour = type, size = samplesize)) +
geom_point() +
scale_y_sqrt() +
facet_wrap(~grade)
# Distribution of adjustment factors:
pollsonly %>%
mutate(Trump = adjpoll_trump / rawpoll_trump,
Clinton = adjpoll_clinton / rawpoll_clinton) %>%
select(Trump, Clinton) %>%
gather(candidate, adj_ratio) %>%
ggplot(aes(x = adj_ratio, colour = candidate, fill = candidate)) +
geom_density(alpha = 0.3) +
ggtitle("Density of adjustment ratios for two main candidates")
pollsonly <- filter(polls, type == "polls-only")
# compare the raw values with the adjusted values for Clinton
pollsonly %>%
ggplot(aes(x = rawpoll_clinton, y = adjpoll_clinton)) +
geom_abline(intercept = 0, slope = 1, colour = "grey75") +
geom_point(alpha = 0.4, aes(size = samplesize, colour = grade)) +
scale_color_viridis(discrete = TRUE, option = "magma") +
guides(colour = guide_legend(override.aes = list(alpha = 1, size = 2))) +
coord_equal()
# For Trump:
pollsonly %>%
ggplot(aes(x = rawpoll_trump, y = adjpoll_trump)) +
geom_abline(intercept = 0, slope = 1, colour = "grey75") +
geom_point(alpha = 0.4, aes(size = samplesize, colour = grade)) +
scale_color_viridis(discrete = TRUE, option = "magma") +
guides(colour = guide_legend(override.aes = list(alpha = 1, size = 2))) +
coord_equal()
# Distribution of adjustment factors:
pollsonly %>%
mutate(Trump = adjpoll_trump / rawpoll_trump,
Clinton = adjpoll_clinton / rawpoll_clinton) %>%
select(Trump, Clinton) %>%
gather(candidate, adj_ratio) %>%
ggplot(aes(x = adj_ratio, colour = candidate, fill = candidate)) +
geom_density(alpha = 0.3) +
ggtitle("Density of adjustment ratios for two main candidates")
pollsonly %>%
filter(state == "U.S.") %>%
select(enddate, rawpoll_clinton, adjpoll_clinton, rawpoll_trump, adjpoll_trump, samplesize, grade) %>%
gather(variable, value, -enddate, -samplesize, -grade) %>%
ggplot(aes(x = enddate, y = value / 100)) +
facet_wrap(~variable) +
geom_point(alpha = 0.4, aes(colour = grade, size = samplesize)) +
geom_smooth(aes(weight = samplesize), span = 0.5) +
scale_color_viridis("Pollster grade", discrete = TRUE, option = "magma") +
guides(colour = guide_legend(override.aes = list(alpha = 1, size = 2))) +
scale_y_continuous("Percentage of intended vote\n", label = percent) +
scale_size_area("Sample size", label = comma) +
ggtitle("Intended vote in the US Presidential election",
subtitle = "National surveys only") +
labs(x = "End date of survey",
caption = "Data compiled by FiveThirtyEight, analysis by http://ellisp.github.io")
View(polls)
View(polls)
pollsonly %>%
filter(state == "U.S.") %>%
select(enddate, rawpoll_clinton, adjpoll_clinton, rawpoll_trump, adjpoll_trump, samplesize, grade) %>%
gather(variable, value, -enddate, -samplesize, -grade) %>%
ggplot(aes(x = enddate, y = value / 100)) +
facet_wrap(~variable) +
geom_point(alpha = 0.4, aes(colour = grade, size = samplesize)) +
geom_smooth(aes(weight = samplesize), span = 0.5) +
scale_color_viridis("Pollster grade", discrete = TRUE, option = "magma") +
guides(colour = guide_legend(override.aes = list(alpha = 1, size = 2))) +
scale_y_continuous("Percentage of intended vote\n") +
scale_size_area("Sample size", label = comma) +
ggtitle("Intended vote in the US Presidential election",
subtitle = "National surveys only") +
labs(x = "End date of survey",
caption = "Data compiled by FiveThirtyEight, analysis by http://ellisp.github.io")
pollsonly %>%
filter(state == "U.S.") %>%
select(enddate, rawpoll_clinton, adjpoll_clinton, rawpoll_trump, adjpoll_trump, samplesize, grade) %>%
gather(variable, value, -enddate, -samplesize, -grade) %>%
ggplot(aes(x = enddate, y = value / 100)) +
facet_wrap(~variable) +
geom_point(alpha = 0.4, aes(colour = grade, size = samplesize)) +
geom_smooth(aes(weight = samplesize), span = 0.5) +
scale_color_viridis("Pollster grade", discrete = TRUE, option = "magma") +
guides(colour = guide_legend(override.aes = list(alpha = 1, size = 2))) +
scale_y_continuous("Percentage of intended vote\n") +
scale_size_area("Sample size") +
ggtitle("Intended vote in the US Presidential election",
subtitle = "National surveys only") +
labs(x = "End date of survey",
caption = "Data compiled by FiveThirtyEight, analysis by http://ellisp.github.io")
install.packages("xml")
install.packages("XML")
library(XML)
srts<-htmlParse("http://apps.saferoutesinfo.org/legislation_funding
/state_apportionment.cfm")
class(srts)
srts.table<- readHTMLTable(srts,stringsAsFactors = FALSE)
money <- sapply(srts.table[[1]][,-1], FUN= function(x)
as.character(gsub(",", "", as.character(x), fixed = TRUE) ))
money<-as.data.frame(substring(money,2), stringsAsFactors=FALSE)
names(money)<-c("Actual.05","Actual.06","Actual.07","Actual.08",
"Actual.09","Actual.10","Actual.11", "Actual.12", "total")
money$state<-srts.table[[1]][,1]
money<-money[,c(10,1:9)]
money
library(XML)
srts<-htmlParse("http://apps.saferoutesinfo.org/legislation_funding
/state_apportionment.cfm")
class(srts)
srts.table<- readHTMLTable(srts,stringsAsFactors = FALSE)
money <- sapply(srts.table[[1]][,-1], FUN= function(x)
as.character(gsub(",", "", as.character(x), fixed = TRUE) ))
money<-as.data.frame(substring(money,2), stringsAsFactors=FALSE)
names(money)<-c("Actual.05","Actual.06","Actual.07","Actual.08",
"Actual.09","Actual.10","Actual.11", "Actual.12", "total")
money$state<-srts.table[[1]][,1]
money<-money[,c(10,1:9)]
money
library(XML)
srts<-htmlParse("http://apps.saferoutesinfo.org/legislation_funding
/state_apportionment.cfm")
install.packages('rvest')
install.packages('stringr')
install.packages('tidyr')
install.packages("stringr")
setwd("C:/Users/jquan01/Desktop/IR-Data")
rmarkdown::render_site
rmarkdown::render_site
rmarkdown::render_IR-Data
rmarkdown::render_site()
install.packages("rmarkdown")
install.packages("rmarkdown")
rmarkdown::render_site()
rmarkdown::render_site("index.Rmd")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
library(rmarkdown)
setwd("C:/Users/jquan01/Desktop/IR-Data")
rmarkdown::render_site()
rmarkdown::render_site()
